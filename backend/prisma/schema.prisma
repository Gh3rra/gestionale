/**
 * PER RIAVVIARE A CAUSA DI UN CAMBIO SCHEMA
 * 1. STOPPARE IL SERVER
 * 2. npx prisma migrate reset
 * 3. npm run db:deploy
 * 4. npm run dev
 */

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tabella per la gestione degli utenti
model User {
  id                          String                        @id @default(cuid())
  name                        String
  email                       String                        @unique
  password                    String
  dark_theme                  Boolean                       @default(false)
  profile_img                 String?
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  Commission                  Commission[]
  PrivateCustomer             PrivateCustomer[]
  JuridicalCustomer           JuridicalCustomer[]
  Supplier                    Supplier[]
  CommissionPrivateCustomer   CommissionPrivateCustomer[]
  CommissionJuridicalCustomer CommissionJuridicalCustomer[]
  CommissionWorkerExpenses    CommissionWorkerExpenses[]
  CommissionTravelExpenses    CommissionTravelExpenses[]
  CommissionOtherExpenses     CommissionOtherExpenses[]
  ItemCategories              ItemCategories[]
  ItemSubCategories           ItemSubCategories[]
  ItemTypes                   ItemTypes[]
  Item                        Item[]
  Worker                      Worker[]
  CommissionIncomes           CommissionIncomes[]
  CommissionDiscounts         CommissionDiscounts[]
  PurchaseItem                PurchaseItem[]
  Purchase                    Purchase[]
  PurchaseDiscounts           PurchaseDiscounts[]
  PurchaseInvoice             PurchaseInvoice[]
  Ddt                         Ddt[]
}

// Tabella per la gestione degli stati delle commesse
model State {
  id          Int          @id @default(autoincrement())
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Commission  Commission[]
}

// Tabella per la gestione delle commissioni
model Commission {
  id                          Int                           @id @default(autoincrement())
  number                      Int                           @unique
  title                       String
  description                 String?
  stateId                     Int
  state                       State                         @relation(fields: [stateId], references: [id])
  initialOfferPrice           Float?
  address                     String?
  city                        String?
  cap                         String?
  province                    String?
  requestDate                 DateTime
  startWorkDate               DateTime?
  endWorkDate                 DateTime?
  userId                      String
  user                        User                          @relation(fields: [userId], references: [id])
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  CommissionPrivateCustomer   CommissionPrivateCustomer[]
  CommissionJuridicalCustomer CommissionJuridicalCustomer[]
  CommissionWorkerExpenses    CommissionWorkerExpenses[]
  CommissionTravelExpenses    CommissionTravelExpenses[]
  CommissionOtherExpenses     CommissionOtherExpenses[]
  CommissionIncomes           CommissionIncomes[]
  CommissionDiscounts         CommissionDiscounts[]
  Purchase                    Purchase[]

  @@index([userId])
}

// Tabella gestione clienti privati
model PrivateCustomer {
  id                        Int                         @id @default(autoincrement())
  name                      String
  surname                   String
  description               String?
  gender                    String
  cf                        String                      @unique
  address                   String?
  city                      String?
  cap                       String?
  province                  String?
  phone                     String?
  email                     String?
  pec                       String?
  profileImg                String?
  userId                    String
  user                      User                        @relation(fields: [userId], references: [id])
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  CommissionPrivateCustomer CommissionPrivateCustomer[]
}

// Tabella gestione clienti giuridici
model JuridicalCustomer {
  id                          Int                           @id @default(autoincrement())
  name                        String
  description                 String?
  ivaCode                     String                        @unique
  cf                          String?                       @unique
  address                     String?
  city                        String?
  cap                         String?
  province                    String?
  legalAddress                String?
  legalCity                   String?
  legalCap                    String?
  legalProvince               String?
  phone                       String?
  email                       String?
  pec                         String
  profileImg                  String?
  userId                      String
  user                        User                          @relation(fields: [userId], references: [id])
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  CommissionJuridicalCustomer CommissionJuridicalCustomer[]
}

// Tabella gestione fornitori
model Supplier {
  id            Int        @id @default(autoincrement())
  name          String
  ivaCode       String     @unique
  cf            String?    @unique
  address       String?
  city          String?
  cap           String?
  province      String?
  legalAddress  String?
  legalCity     String?
  legalCap      String?
  legalProvince String?
  phone         String?
  email         String?
  pec           String
  profileImg    String?
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Purchase      Purchase[]
}

// Tabella gestione clienti privati per le commesse
model CommissionPrivateCustomer {
  commissionId      Int
  privateCustomerId Int
  commission        Commission      @relation(fields: [commissionId], references: [id])
  privateCustomer   PrivateCustomer @relation(fields: [privateCustomerId], references: [id])
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@id([commissionId, privateCustomerId])
  @@index([commissionId, privateCustomerId])
}

// Tabella gestione clienti giuridici per le commesse
model CommissionJuridicalCustomer {
  commissionId        Int
  juridicalCustomerId Int
  commission          Commission        @relation(fields: [commissionId], references: [id])
  juridicalCustomer   JuridicalCustomer @relation(fields: [juridicalCustomerId], references: [id])
  userId              String
  user                User              @relation(fields: [userId], references: [id])
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@id([commissionId, juridicalCustomerId])
  @@index([commissionId, juridicalCustomerId])
}

// Tabella gestione sconti
model CommissionDiscounts {
  id           Int        @id @default(autoincrement())
  amount       Float
  date         DateTime
  commissionId Int
  commission   Commission @relation(fields: [commissionId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([commissionId, userId])
}

model PurchaseDiscounts {
  id                Int             @id @default(autoincrement())
  amount            Float
  date              DateTime
  purchaseInvoiceId Int
  purchaseInvoice   PurchaseInvoice @relation(fields: [purchaseInvoiceId], references: [id])
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([userId])
}

// Tabella gestione lavoratori
model Worker {
  id                       Int                        @id @default(autoincrement())
  name                     String
  surname                  String
  cf                       String                     @unique
  address                  String
  city                     String
  cap                      String
  province                 String
  phone                    String
  email                    String
  profileImg               String?
  userId                   String
  user                     User                       @relation(fields: [userId], references: [id])
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  CommissionWorkerExpenses CommissionWorkerExpenses[]

  @@index([userId])
}

// Tabella gestione spese lavoratori
model CommissionWorkerExpenses {
  id             Int        @id @default(autoincrement())
  costPerHour    Float
  totalCost      Float
  morningStart   DateTime
  morningEnd     DateTime
  afternoonStart DateTime
  afternoonEnd   DateTime
  hours          Int
  workerId       Int
  worker         Worker     @relation(fields: [workerId], references: [id])
  commissionId   Int
  commission     Commission @relation(fields: [commissionId], references: [id])
  userId         String
  user           User       @relation(fields: [userId], references: [id])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([commissionId, userId])
}

// Tabella gestione spese di viaggio
model CommissionTravelExpenses {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  totalPrice   Float
  commissionId Int
  commission   Commission @relation(fields: [commissionId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([commissionId, userId])
}

// Tabella gestione altre spese
model CommissionOtherExpenses {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  totalPrice   Float
  commissionId Int
  commission   Commission @relation(fields: [commissionId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([commissionId, userId])
}

// Tabella gestione macrocategorie
model ItemCategories {
  id                Int                 @id @default(autoincrement())
  title             String
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ItemSubCategories ItemSubCategories[]
}

// Tabella gestione sottocategorie
model ItemSubCategories {
  id         Int            @id @default(autoincrement())
  title      String
  categoryId Int
  category   ItemCategories @relation(fields: [categoryId], references: [id])
  userId     String
  user       User           @relation(fields: [userId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  ItemTypes  ItemTypes[]
}

// Tabella gestione tipologie di articoli
model ItemTypes {
  id            Int               @id @default(autoincrement())
  title         String
  subCategoryId Int
  subCategory   ItemSubCategories @relation(fields: [subCategoryId], references: [id])
  userId        String
  user          User              @relation(fields: [userId], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  Item          Item[]
}

// Tabella gestione articoli
model Item {
  id           Int            @id @default(autoincrement())
  brand        String?
  model        String
  description  String?
  meterWeight  Float?
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  typeId       Int
  type         ItemTypes      @relation(fields: [typeId], references: [id])
  PurchaseItem PurchaseItem[]

  @@index([userId])
}

model PurchaseItem {
  id            Int          @id @default(autoincrement())
  unitMeasureId Int
  unitMeasure   UnitMeasures @relation(fields: [unitMeasureId], references: [id])
  purchaseId    Int
  purchase      Purchase     @relation(fields: [purchaseId], references: [id])
  quantity      Int?
  unitPrice     Float?
  totalPrice    Float
  itemId        Int
  item          Item         @relation(fields: [itemId], references: [id])
  ddtId         Int
  ddt           Ddt          @relation(fields: [ddtId], references: [id])
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Purchase {
  id                       Int              @id @default(autoincrement())
  supplierId               Int
  supplier                 Supplier         @relation(fields: [supplierId], references: [id])
  invoiceId                Int
  commissionId             Int
  commission               Commission       @relation(fields: [commissionId], references: [id])
  userId                   String
  user                     User             @relation(fields: [userId], references: [id])
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  PurchaseItem             PurchaseItem[]
  supplierPaymentMethodsId Int?
  PurchaseInvoice          PurchaseInvoice? @relation("PurchaseToInvoice")
  PaymentTerms             PaymentTerms?    @relation(fields: [paymentTermsId], references: [id])
  paymentTermsId           Int?
}

// Tabella gestione metodi di pagamento
model PaymentMethods {
  id                Int                 @id @default(autoincrement())
  title             String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  CommissionIncomes CommissionIncomes[]
}

// Tabella gestione entrate commissioni
model CommissionIncomes {
  id              Int            @id @default(autoincrement())
  description     String?
  amount          Float
  paymentDate     DateTime
  paymentMethodId Int
  paymentMethod   PaymentMethods @relation(fields: [paymentMethodId], references: [id])
  commissionId    Int
  commission      Commission     @relation(fields: [commissionId], references: [id])
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([commissionId, userId])
}

model PaymentTerms {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Purchase        Purchase[]
  PurchaseInvoice PurchaseInvoice[]
}

// Tabella gestione fatture articoli
model PurchaseInvoice {
  id                Int                 @id @default(autoincrement())
  invoiceNumber     String
  invoiceDate       DateTime
  paymentMethodId   Int
  taxableAmount     Float
  vat               Float
  totalAmount       Float
  purchaseId        Int                 @unique
  purchase          Purchase            @relation("PurchaseToInvoice", fields: [purchaseId], references: [id])
  userId            String
  user              User                @relation(fields: [userId], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  PurchaseDiscounts PurchaseDiscounts[]
  Ddt               Ddt[]
  PaymentTerms      PaymentTerms?       @relation(fields: [paymentTermsId], references: [id])
  paymentTermsId    Int?

  @@index([userId])
}

// Tabella gestione unità di misura articoli
model UnitMeasures {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  PurchaseItem PurchaseItem[]
}

model Ddt {
  id           Int             @id @default(autoincrement())
  number       String
  date         DateTime
  invoiceId    Int
  invoice      PurchaseInvoice @relation(fields: [invoiceId], references: [id])
  userId       String
  user         User            @relation(fields: [userId], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  PurchaseItem PurchaseItem[]
}
